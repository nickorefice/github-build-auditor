# GitHub Build Auditor

The GitHub Build Auditor is a tool designed to help developers analyze and optimize their GitHub Actions workflows by tracking the duration of Docker build steps. This tool provides insights into the performance of individual steps within your CI/CD pipelines, allowing you to identify bottlenecks and improve build efficiency.

With the GitHub Build Auditor, you can:
- Retrieve and analyze the duration of Docker build steps in your GitHub Actions workflows.
- Filter steps based on duration to focus on the most time-consuming parts of your pipeline.
- Identify unique steps and calculate the total duration for specified step names.
- Generate detailed reports in JSON format for further analysis.

This project is ideal for developers and DevOps engineers looking to optimize their CI/CD workflows and reduce build times.

---

## ‚ú® Features

With the GitHub Build Auditor, you can:
- ‚è± **Analyze Docker Build Durations**: Retrieve and evaluate the time taken by individual Docker build steps in your GitHub Actions workflows.
- üîç **Filter Steps by Duration**: Focus on the most time-consuming Docker builds in your pipeline to identify optimization opportunities.
- üìä **Aggregate Durations**: Identify unique steps and calculate their total duration for better reporting and tracking.
- üìù **Generate Detailed Reports**: Export results in **JSON format** for further analysis and sharing.

---

## üõ† Prerequisites

Before using the GitHub Build Auditor, ensure you have:
- **Python 3.6+**
- A **GitHub Personal Access Token** with fine-grained permissions.

## üõ† Creating a GitHub Personal Access Token

1. **Log in to GitHub**:
   - Go to [GitHub](https://github.com) and log in to your account.

2. **Navigate to Settings**:
   - Click on your profile picture in the upper-right corner.
   - Select "Settings" from the dropdown menu.

3. **Access Developer Settings**:
   - In the left sidebar, scroll down and click on "Developer settings".

4. **Personal Access Tokens**:
   - Click on "Personal access tokens" in the left sidebar.
   - Click on "Tokens (fine-grained)" if you are using the fine-grained token interface.

5. **Generate New Token**:
   - Click the "Generate new token" button.
   - Give your token a descriptive name in the "Note" field.

6. **Select Repository Access**:
   - Choose the repositories you want to grant access to or select "All repositories" if you want to access all repositories.

7. **Set Permissions**:
   - Under "Repository permissions", set the following:
     - **Contents**: `Read-only` (to access repository contents)
     - **Metadata**: `Read-only` (to access repository metadata)
     - **Actions**: `Read-only` (to access workflow runs and jobs)

8. **Generate Token**:
   - Scroll down and click the "Generate token" button.

9. **Copy the Token**:
   - Copy the generated token and store it in a safe place. You won't be able to see it again once you leave the page.

10. **Add Token to .env File**:
    - Open your [.env](http://_vscodecontentref_/0) file and add the token:

      ```properties
      GITHUB_TOKEN=your_generated_token_here
      GITHUB_USERNAME=your_github_username_here
      ```

### Why Each Permission is Needed

- **Contents (Read-only)**: This permission allows the script to read the contents of the repositories. It is necessary to access the workflows and their configurations stored in the repository.
- **Metadata (Read-only)**: This permission allows the script to read metadata about the repositories. It is necessary to list the repositories and retrieve basic information about them, such as their names and IDs.
- **Actions (Read-only)**: This permission allows the script to read information about GitHub Actions workflows, workflow runs, and jobs. It is necessary to:
  - List workflows in a repository.
  - Retrieve workflow runs for a specific workflow.
  - Retrieve jobs and steps within a workflow run to analyze the Docker build times.

---

## üöÄ Installation

1. Clone the repository:
   ```sh
   git clone https://github.com/nickorefice/github-build-auditor.git
   cd github-build-auditor
   ```

2. Install the required dependencies:
   ```bash
   pip3 install -r requirements.txt
   ```

---

## ‚öôÔ∏è Usage

1. Set your GitHub Personal Access Token as an environment variable:
   ```bash
   export GITHUB_TOKEN=your_personal_access_token
   ```

2. Run the auditor with the following command:
   ```bash
   python3 src/github_build_auditor.py
   ```

   **Options**:
   - `--unique-steps`: Print unique step names to JSON.
   - `--filter-duration <seconds>`: Filter steps found exceeding a specified duration (e.g., `--filter-duration 15` for steps longer than 15 seconds).
   - `--unique-steps`: Print unique step names to JSON.
   - `--force-continue`: Force continue even if there's an error without prompting the user.
   - `--step-names-file <path>`: Path to JSON file containing step names to calculate totals.

3. Create a `step_names.json` file containing all possible Docker build step names then rerun the auditor with the `--step-names-file` option. 
   ```bash
   python3 src/github_build_auditor.py --step-names-file /path/to/step_names.json
   ```

   Example output:
   ```json
   {
    "Build and push": 7931.0,
    "Docker Setup QEMU": 93.0,
    "Build and push by digest": 722.0,
    "Build and push Docker image on push": 2572.0,
    "Build and push Docker image on PR": 56.0,
    "Set up QEMU": 11.0
   }
   ```

---

## üì¶ Example JSON Report

Here‚Äôs an example of a generated report:
```json
[
    {
        "step_name": "Build and push",
        "repo_full_name": "nickorefice/db-demo",
        "workflow_name": "CI",
        "run_id": 12165501010,
        "job_id": 33929599124,
        "step_number": 3,
        "started_at": "2024-12-04T17:54:47Z",
        "completed_at": "2024-12-04T17:54:56Z",
        "duration_seconds": 9.0,
        "url": "https://api.github.com/repos/nickorefice/db-demo/actions/jobs/33929599124",
        "html_url": "https://github.com/nickorefice/db-demo/actions/runs/12165501010/job/33929599124"
    },
    {
        "step_name": "Build and push",
        "repo_full_name": "nickorefice/other-repo",
        "workflow_name": "CI",
        "run_id": 12165501010,
        "job_id": 33929599404,
        "step_number": 3,
        "started_at": "2024-12-04T17:54:46Z",
        "completed_at": "2024-12-04T17:54:51Z",
        "duration_seconds": 5.0,
        "url": "https://api.github.com/repos/nickorefice/other-repo/actions/jobs/33929599404",
        "html_url": "https://github.com/nickorefice/other-repo/actions/runs/12165501010/job/33929599404"
    }
]
```

---

## üìñ Documentation

### Available CLI Options:
- `--unique-steps`: Print unique step names to JSON.
- `--filter-duration <seconds>`: Filter steps found exceeding a specified duration (e.g., `--filter-duration 15` for steps longer than 15 seconds).
- `--unique-steps`: Print unique step names to JSON.
- `--force-continue`: Force continue even if there's an error without prompting the user.
- `--step-names-file <path>`: Path to JSON file containing step names to calculate totals.

---

## üõ° Security

Make sure to:
1. Use a GitHub Personal Access Token with **minimal necessary permissions**.
2. Avoid sharing your token or committing it to version control.

---

## ü§ù Contributing

Contributions are welcome! To get started:
1. Fork the repository.
2. Create a new branch (`git checkout -b feature-branch`).
3. Commit your changes (`git commit -m 'Add feature'`).
4. Push to the branch (`git push origin feature-branch`).
5. Create a pull request.

---

## üìÑ License

This project is licensed under the [MIT License](LICENSE).

---

## üìß Contact

For questions or support, feel free to open an [issue](https://github.com/nickorefice/github-build-auditor/issues) or reach out directly.
